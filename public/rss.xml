<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Phil Giammattei]]></title><description><![CDATA[The website of Phil Giammattei, a software engineer, musician, and writer.]]></description><link>https://giammattei.co</link><image><url>https://giammattei.co/icon.png</url><title>Phil Giammattei</title><link>https://giammattei.co</link></image><generator>RSS for Node</generator><lastBuildDate>Thu, 15 Jun 2023 17:18:37 GMT</lastBuildDate><atom:link href="https://giammattei.co/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 20 Feb 2023 10:30:00 GMT</pubDate><copyright><![CDATA[2023 Phil Giammattei]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[phil@giammattei.co]]></managingEditor><webMaster><![CDATA[phil@giammattei.co]]></webMaster><ttl>60</ttl><item><title><![CDATA[Book of Changes]]></title><description><![CDATA[<h3 id="viewfrontendcodeherehttpsgithubcomphilgiammatteibookofchangesuiandbackendcodeherehttpsgithubcomphilgiammatteibookofchangesapi">View frontend code <a href="https://github.com/philgiammattei/book-of-changes-ui">here</a> and backend code <a href="https://github.com/philgiammattei/book-of-changes-api">here.</a></h3>
<p>A full-stack application to automate the process of generating and interpreting a reading from the YiJing, an ancient Chinese divination system.</p>
<h2 id="inspiration">Inspiration</h2>
<p>The Yijing, also known as I Ching (Book of Changes in English) is a veeeeeery old book. Some say it is the oldest known book, full stop. Written and revised at least 2500 years ago, it is old enough to have been studied by Confucius and become a work of "classic literature" in the second century. At its core it describes a set of patterns and offers explanation of what each pattern means and how they fit together. Over time this has made the YiJing's symbols a very popular tool for divination, roughly analogous with Tarot in Europe.</p>
<p>The patterns are called hexagrams, and they are composed of a stack of 6 lines, which are either broken (yin) or unbroken (yang). Here's a very early example of binary math: each line is effectively a binary switch, it's either "on" or "off". A trigram, or set of three lines, then has 2^3, or 8 possible permutations. This is known as the BaGua and you can see them on the flag of South Korea. A hexagram, then, has 2^6 or 64 possible permutations, which make up the YiJing text. A usual reading allows the hexagram drawn to turn into any other hexagram, which ends up creating 2^12, or 4,096 possible readings!</p>
<p>I discovered the YiJing while pursuing my Religious Studies degree and came to enjoy the quiet, meditative process of making a reading, and seeing what became of it. I don't concern myself with the "efficacy" of the system, i.e. the existence or nature of mystical forces that conspire to make a reading predict the future. The symbols are rich with meaning, and each one shown has something to say in response to whatever question was posed. Plus, it's a great party trick.</p>
<p>The way that you draw a hexagram depends on your method, but the <a href="https://en.wikibooks.org/wiki/I_Ching/The_Ancient_Yarrow_Stalk_Method">ancient method</a> is my favorite. A set of 50 sticks are randomly divided into piles and reorganized in a very specific multi-step manner to resolve to one of two possibilities. This process is repeated over and over, the output of each operation being added to others to form the properties of each line of the reading. If this sounds like it takes a while, that's because it does. I procured a set of yarrow stalks in my youth but don't use them much because a full reading can take as long as 30 minutes to generate. There's got to be a better way!</p>
<h2 id="implementation">Implementation</h2>
<p>While pining about how I don't have the luxury of time to use my yarrow sticks more regularly (having a toddler in the house will do that), it occurred to me that this was an interesting system to simulate using programming. In particular, the steps describing the dividing and recombining the sticks are very much an algorithm, one that could easily be expressed in code. Moreover, it occurred to me that the domains of forming a reading lend themselves well to a full-stack app. A database could hold the explanation of each reading, which is queried by the particular combination of lines generated by the reading on a backend server, which generates that query after receiving a request from the frontend, which could display the results.</p>
<p>The contents of my favorite YiJing book were entered by hand into a spreadsheet, which I converted using an online tool into a database schema and insert statement. I chose Java Spring for my backend, and cheated a bit on the database by using a JPA repository rather than a fully remote database, since for my initial scope I would only be reading information from the database, not writing to it. The backend is composed of a controller, which receives a request, then calls services to generate the random numbers needed for the readings, assemble the lines that form the reading, and query the database to receive the explanation text. This is all packaged in an easily-consumable manner and sent to the frontend, an Angular Application with Angular Material for styles.</p>
<p>One fun thing that I wanted to add was a different way to generate random numbers. Computers <em>can't</em> really generate truly random numbers, but they can generate a series of numbers based on hashes of the system time, which do a good enough job in most cases. I wanted something a little more mystical, though, and decided to take advantage of a very cool service: ANU's <a href="https://qrng.anu.edu.au/">Quantum Number Generator</a>. Tiny quantum fluctuations occur inside even a vacuum, and researchers have a number of sensors hooked up to one such vacuum and the data they read from the roiling of the void within provide the seed values for the numbers. Extremely cool.</p>
<h2 id="iteration">Iteration</h2>
<p>I'm very pleased with the result. The backend is hosted on heroku and takes about 10 seconds to respond, but you get what you pay for. I've made consuting the YiJing a daily practice, and while it can be persuasively argued that it's not the same experience as doing it by hand, it's made it much more accessible.</p>
<p>There's a lot I could do to improve this app. Chief among them is the ability for a user to see their reading history, which would make this a lot less ephemeral. Inspired by Wordle, some sort of simple sharing option would be extremely cool too. I will likely revisit this project in the future to work on these features and more. But I'm not sure. If only I had a way to predict the future…</p>]]></description><link>https://giammattei.co/blog/book-of-changes</link><guid isPermaLink="true">https://giammattei.co/blog/book-of-changes</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Mon, 14 Mar 2022 04:00:00 GMT</pubDate></item><item><title><![CDATA[giammattei.co, Part Deux]]></title><description><![CDATA[<p>Welcome to the new and improved giammattei.co! While it may look and feel much the same as your last visit (if you were one of the 10 people to visit the site in its first year of existence), under the hood, everything is different. This site is now a single-page Angular app, and I thought it'd be fun to explain why I took the time to take a weed whacker to my code, and what gives the "modern" frameworks that now dominate the web their edge.</p>
<p>I made a very deliberate choice when <a href="./giammattei">building this site out originally</a>, which was to do it old-school. No fancy frameworks, no abstract magic, no templates. The structure, content and styles of the entire site were hand-coded, by me, line by line.</p>
<p>Just like the websites of old, my project directory had a collection of HTML files, each corresponding to a page on the site, a global CSS file that dictated the styles of all the page elements, and a collection of image assets. I used JavaScript for one purpose: showing and hiding the hamburger menu in mobile view.</p>
<p>And it worked! I had created a modern-looking, fully functional site, and I knew every inch of it and exactly how it worked. While I was spared the process of using FTP to deploy my site to a server, in most other ways I was doing web development the way that we all did 10+ years ago.</p>
<p>Along the way, I discovered The Pain Points.</p>
<h3 id="dontrepeatyourself">Don't Repeat Yourself</h3>
<p>Here's the thing about doing things the old way: there's no abstraction. The biggest lesson of modern programming is DRY: Don't Repeat Yourself.</p>
<p>Unfortunately this is unavoidable when editing static HTML. The header, navigation menu, and footer for my site are the same regardless of what page you're on, but this is because each of my HTML docs has the same exact code at the top and bottom. If I were to change my design, I would have to go into every single HTML document and make the changes individually to each page. This makes my programmer brain scream, and disincentivized me from making frequent additions to the site; any new post would involve a lot of custom HTML to show properly, which is more inertia to overcome.</p>
<p>A much better way to handle this problem would be to store the header and footer code in ONE place, and then call that code for each new page. That way, if you redesign the footer, you change the code in one place and everyone gets that change for free. Ultimately that's what my Angular app now does: the App Component has all the shared HTML from my old site, and in between the header and footer, where the actual content is, is a router outlet that dynamically loads in the content required based on the url. Pretty cool!</p>
<h3 id="dynamicgeneration">Dynamic Generation</h3>
<p>Extending this concept further, there's room for improvement in the content itself. Take a look at some code from my old site's Projects page:</p>
<pre><code>&lt;div class="projects"&gt;

  &lt;div class="project"&gt;
    &lt;div class="overlay"&gt;&lt;/div&gt;
    &lt;a href="kerfcase.html"&gt;
    &lt;img src="images/kerfcase-cover.png" alt="kerfcase"&gt;
  &lt;/a&gt;
  &lt;h3&gt;&lt;a href="kerfcase.html"&gt;KerfCase.com&lt;/a&gt;&lt;/h3&gt;

  &lt;/div&gt;
  &lt;div class="project"&gt;
    &lt;div class="overlay"&gt;&lt;/div&gt;
    &lt;a href="minesweeper.html"&gt;
    &lt;img src="images/minesweeper-cover.png" alt="minesweeper"&gt;&lt;/a&gt;
      &lt;h3&gt;&lt;a href="minesweeper-project.html"&gt;Minesweeper&lt;/a&gt;&lt;/h3&gt;

  &lt;/div&gt;
  &lt;div class="project"&gt;
    &lt;div class="overlay"&gt;&lt;/div&gt;

      &lt;img src="images/giammattei-co-cover.png" alt="giammattei.co"&gt;&lt;/a&gt;
      &lt;a href="giammattei.html" alt="giammattei.co"&gt;&lt;h3&gt;giammattei.co&lt;/a&gt;&lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>This produced a nice set of elements describing my various projects that looked like this:</p>
<p><img src="assets/images/old-projects.png" alt="old project elements" /></p>
<p>This looks cool, but it's all done by hand. Which means that if I add a project to my site, I need to write the code to get it to show up in this list. That's more friction than I want, especially when I can use JavaScript to make it happen automatically.</p>
<p>The Angular solution to this problem looks something like this:</p>
<pre><code>&lt;div class="projects"&gt;
  &lt;div class="project" *ngFor="let project of projects"&gt;
    &lt;div class="overlay"&gt;&lt;/div&gt;
    &lt;a routerLink="post/{{project.url}}"&gt;
      &lt;img src="assets/images/{{project.img-url}}"&gt;&lt;/a&gt;
    &lt;h3&gt;&lt;a routerLink="post/{{project.url}}&gt;{{project.title}}&lt;/a&gt;&lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>That's it! This code loops through all my projects and dynamically generates the proper HTML for me, so when I add a new project I don't have to spend time putting it in the right place. Instead of a lot of code writing, I just need to update a few pieces of metadata in a configuration file, and Angular does the rest. This functionality is what allowed me to change my homepage from a static welcome page to a dynamic, reverse-chronological series of posts.</p>
<h3 id="markdown">Markdown</h3>
<p>What I'm maybe proudest of is the way I write posts now. Previously, once again, my blog posts were written in HTML. It's not ideal to have to format your post as code while you're trying to write; those are two different mental modes that don't mix well. But I also didn't want to have to rely on a third-party blog editor to make my posts, or worse, write one myself.</p>
<p>Enter Markdown. Invented by John Gruber of <a href="daringfireball.net">Daring Fireball</a> fame, markdown is a markup language that is easy to read in code form, and easy to convert to HTML. Here's what markdown looks like:</p>
<pre><code># This is a Header

This is a paragraph.  A beautiful, beautiful paragraph.

- bullet 1
- bullet 2

[link](giammattei.co)
</code></pre>
<p>Here's what the HTML it converts to looks like:</p>
<pre><code>&lt;h1&gt;This is a Header&lt;/h1&gt;
&lt;p&gt;This is a paragraph.  A beautiful, beautiful paragraph.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;bullet 1&lt;/li&gt;
  &lt;li&gt;bullet 2&lt;/li&gt;
&lt;/ul&gt;
&lt;a href="giammattei.co"&gt;link&lt;/a&gt;
</code></pre>
<p>And here's how it renders on a page:</p>
<h1 id="thisisaheader">This is a Header</h1>
<p>This is a paragraph. A beautiful, beautiful paragraph.</p>
<ul>
<li>bullet 1</li>
<li>bullet 2</li>
</ul>
<p><a href="giammattei.co">link</a></p>
<p>If this looks familiar, you might recognize it from Reddit's comment formatting instructions, or GitHub's readme.md file. Once you understand how to write it (and it doesn't take long at all), you'll see it in all sorts of places! Markdown has caught on in a big way, and it's easy to see why.</p>
<p>Using the <a href="https://www.npmjs.com/package/ngx-markdown">ngx-markdown</a> library, I can write my posts directly in my code editor and Angular can turn them into HTML automatically, while giving me complete control over their style and layout. It's the missing piece to having a truly productive blogging platform, that lets me write posts when I want to write posts, and not have to worry about the code part unless I want to be worried about it.</p>
<h3 id="goingforward">Going Forward</h3>
<p>I'm still picking up the pieces on the other side of my migration, but I'm pleased with my new workflow and hope to take advantage of the fact that it's now much easier for me to post here. Let me know if you have any questions about the update, if you notice any bugs, or if you have any ideas for future posts!</p>]]></description><link>https://giammattei.co/blog/giammattei-2</link><guid isPermaLink="true">https://giammattei.co/blog/giammattei-2</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Sun, 30 Aug 2020 04:00:00 GMT</pubDate></item><item><title><![CDATA[I'm Writing an App For My Band]]></title><description><![CDATA[<p>Every garage band deserves an enterprise-level IT infrastructure.</p>
<p><img src="https://cdn-images-1.medium.com/max/5856/1*BKhyygph715XTFsPfQ_Jdw.jpeg" alt="" /></p>
<p>In the Year Of Our Lord 2020, if you’re attempting to maintain positive cash flow, “I’m in a band” means “I am a cofounder and partner in a content-based ecommerce company, with an aggressive schedule of pop-up stores accompanying exclusive networking events.” There’s a reason the classic rock n’ roll dream starts with an agent discovering the act and signing them to a deal; in this ideal fantasy, other people take care of the business stuff, leaving you to the shredding. Every successful musician has to learn one day that that infrastructure doesn’t really exist anymore, and if you want the job done right, you have to do it yourself.</p>
<p>Day jobs can help bridge this gap. From accounting to marketing to sales, there’s lots of opportunities to take professional experience and apply it to your chosen hobby. In past lifetimes I’ve dabbled in various Business Sciences and thought about how to apply their secrets in the musical sphere, and now that I’m a burgeoning software engineer, even more doors have opened.</p>
<h2 id="whatdoesabandneed">What Does a Band Need?</h2>
<p><img src="https://cdn-images-1.medium.com/max/5120/1*RcO59ERlcmKsAXgphP7sNQ.jpeg" alt="" /></p>
<p><a href="http://badcuster.com">Bad Custer</a> is a long time labor of love, composed of a group of friends who have been playing music together since high school. We’ve been playing various dingy venues in the Pittsburgh area since 2014, and have built up a small but loyal following as we write, remix and mutate our ever-changing catalog of songs. Our second album, <a href="https://misra.bandcamp.com/album/bad-custer-needs-work">Needs Work</a>, is out in June (release show pending, per plague) and the rest of our catalog gets regular plays on <a href="https://open.spotify.com/artist/4DZ8fKIQM5cpAVAQy3zs9L">Spotify</a>.</p>
<p>What a band like Bad Custer needs out of technology is a way to engage fans. Expose people to the music (ostensibly the reason for all of this bother), drive attendence to shows, and if you’re savvy, sell merch online.</p>
<p>If there was a Golden Age of Bands Online, it would definitely be the era of MySpace. Completely customizable pages, free music hosting, very little restrictions on messaging, and a Top 8 you could try to get a spot on. Since we’re not in 2006 anymore, there’s a new environment. Facebook is necessary because no one does event invites better. Music is best hosted on BandCamp or SoundCloud, and Instagram and Twitter are good for reminding people you exist. Mailchimp is a great tool for cultivating an email list, and a website is imperative for SEO.</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*rQiaE6OobRLBB2-Jb8sAug.png" alt="Pictured: a young musician manages their online presence." /><em>Pictured: a young musician manages their online presence.</em></p>
<p>badcuster.com first took form as a Squarespace page. It was very easy to get set up with a professional-looking site, but you pay out the nose for it. Up to $18 a month just to keep the lights on was not feasible for an act that had yet to up its merch game. Once I learned that you can host a website for $0 if you host it yourself, I created a raw HTML/CSS page for our online presence, and then moved to Angular to make changes easier. Now, an AirTable list of shows that can be edited on my phone now shows up on the website, automatically removing shows that have passed so I don’t have to edit them out. Magic!</p>
<p>But I think we can do better. A year ago I made a first pass at what would be a unique and compelling tool for us to accomplish our goals. Something that we could hawk in between songs instead of just our social media. “Hey, we’re Bad Custer, and we have an app. Install it from your device’s app store or whatever.”</p>
<p>What would the ideal app have? I’ve thought a lot about the creative possibilities that having an embedded phone presence would make possible, but at its simplest form, in order to drive user engagement, we need 3 things:</p>
<ul>
<li><p>Play our music. Free at first to drive downloads, but maybe some exclusive content for sale down the road.</p></li>
<li><p>Deep links to our other web presences. Website, Spotify, Instagram, anywhere that our fans might want us to be for them.</p></li>
<li><p>Push notifications for shows and other important events. Far superior to an email or facebook notification, this would be a way to occasionally remind people about upcoming events in a very direct way.</p></li>
</ul>
<h2 id="mki">Mk I</h2>
<p>There’s a small wrinkle: iOS programming sucks. You have to pay to do it, you’re locked into Apple’s tools, which change basically on a whim and break in fun new ways, and there’s a lot of trial and error in getting something to work. Especially when learning how to program, it’s a dangerous mire to get stuck in.</p>
<p>A year ago I made a first pass at a Bad Custer app. While eventually it reached a more mature form, I’ll never be prouder of myself than when I successfully wrote The Horse Button.</p>
<p>At its core the app should be a music player, so getting it to play sounds in response to button touching was sort of the whole deal. In order to learn Apple’s arcane audio API, I started with a picture of a horse that, when tapped, would emit a laptop microphone recording of me shouting “I’m a horse!” Sadly, no recording of The Horse Button exists, its legend lost to time.</p>
<p>I did manage to build out the first two features, with the music player being the most fun. All those touches you take for granted on a phone — seeing album art on the lock screen, controlling output in the control center, using headphones — had to be written in one at a time.</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*EWAAThuLwSw9PvPRWTjZTQ.png" alt="" /></p>
<p>I got this app running on my personal device, but never deployed it to the app store. It wasn’t ready, I was fighting an uphill battle with Apple’s tools, and I was sidetracked by other projects. But now is the time to return!</p>
<h2 id="mkii">Mk II</h2>
<p>Since putting down the app project, I accomplished a few other tasks. Namely, attending a coding boot camp and getting hired as a professional software developer. I’m now somewhat competent in Angular, a JavaScript library made by Google, because I am paid to be. At my new workplace, I learned that there are ways to make an Angular project work on mobile devices with less fuss than developing 100% natively. The technologies, called Ionic and Cordova, would allow me to transmit my new skills toward my old goal, and develop for Android simultaneously to boot!</p>
<p>I want to build the core app quickly, because what REALLY excites me about this project is the creative possibilities. Now that I’m writing enterprise code 40 hours a week, for Serious Business Professionals, I want a place to blow off steam. What better place than an app for my band, which is bound by no rules of decorum?</p>
<p>I’ve been brainstorming future features (and would welcome suggestions!): Photo filters, machine-driven song generators, WinAmp style skins and music visualizers. Because why the hell not?</p>
<p>First, though, I have to write the damn thing, and I’m hoping that this post will serve as public motivation. You can follow along on twitter, where I’ll be <a href="https://twitter.com/philgiammattei/status/1251618972870508546">updating a thread</a> with my progress. Wish me luck, and have a happy quarantine!</p>]]></description><link>https://giammattei.co/blog/app-band</link><guid isPermaLink="true">https://giammattei.co/blog/app-band</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Sat, 18 Apr 2020 04:00:00 GMT</pubDate></item><item><title><![CDATA[Dicematch]]></title><description><![CDATA[<h3 id="viewcodeherehttpsgithubcomphilgiammatteidicematch">View code <a href="https://github.com/philgiammattei/dicematch">here.</a></h3>
<p>An Angular SPA to generate a random game of <a href="https://www.facebook.com/DiceThrone/">Dice Throne</a>. Users can name their players, configure teams, and set the pool of playable classes.</p>
<h2 id="underthehood">Under the hood</h2>
<p>I made this to solve a problem my wife and I had while playing <a href="https://www.facebook.com/DiceThrone/">Dice Throne</a>, which is that there are (at present time) 14 different classes to choose from, creating hundreds of possible matchups. For a while I ran some JavaScript code in a console to generate random matchups, but when I was looking for a project to enhance my experience with Angular, this seemed like a perfect fit.</p>
<p>The structure of this app is simple: an app component handles the state and business logic, passing data to and receiving events from its children. Above the Match button, components allow the player to configure the match with names, player number and team size, and which heroes to choose from. All of these changes fire events to alter the state of the app component.</p>
<p>When the match button is clicked, this state generates random class assignments that are then displayed below. A fun thing to configure was the random team names, taken from an open-source JSON file containing many English words.</p>
<h2 id="futurework">Future work</h2>
<p>If I revisit this app, my main goal is to give the player/class matchup cards more personality. Incorporating official assets and custom color schemes to differentiate the classes would be in the spirit of the game, and make the experience more engaging. I'll be monitoring feedback from the Dice Throne community for more enhancement ideas.</p>]]></description><link>https://giammattei.co/blog/dicematch</link><guid isPermaLink="true">https://giammattei.co/blog/dicematch</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Thu, 06 Feb 2020 05:00:00 GMT</pubDate></item><item><title><![CDATA[Dijkstra's Cart]]></title><description><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra's Algorithm</a> helps you find the shortest path through a graph. Dijkstra's Cart is an automagic shopping list to help you chart the most efficient route through your neighborhood grocery store.</p>
<p>View this app in action <a href="https://dijikstras-cart.netlify.com/">here</a>.</p>
<h2 id="features">Features</h2>
<p>Dijkstra's Cart inputs a series of grocery items from the user (e.g. Broccoli or Pork Chops), and matches each item to a section of the store (e.g. Produce or Meat). Each item is mapped to its corresponding section as it is entered, and the sections are ordered by their location in the store (Users can re-order sections to match their store's layout).</p>
<p>If the app cannot match an item to a section, the user can manually select its section, and Dijikstra's Cart will remember this mapping for all future sessions.</p>
<p>This app was designed to be accessible and mobile-friendly from the start, so touch targets are large and the layout looks great on any size screen.</p>
<h2 id="underthehood">Under the Hood</h2>
<p>I wrote Dijkstra's Cart to help familiarize myself with React, a popular front-end library and industry hot topic. React excels at creating modular views and responding quickly and efficiently to input, so it's the perfect match for an auto-sorting grocery list.</p>
<p>React organizes on Components, which are lightweight, modular and reusable. The <code>&lt;App /&gt;</code> component contains the header and <code>&lt;List /&gt;</code>, which is itself composed of <code>&lt;Section /&gt;</code> components, which generate <code>&lt;Item /&gt;</code> and <code>&lt;Checkbox /&gt;</code> components.</p>
<p>Through callback functions, mouse input trickles up the hierarchy, and the <code>setState()</code> and <code>render()</code> functions of parent components pass information from parents to children. Most of the business logic of the app occurs at the <code>&lt;List /&gt;</code> level, where arrays of interrelated <code>item</code> and <code>section</code> objects are manipulated to reflect the user's input.</p>
<p>Dijkstra's Cart utilizes an <a href="https://airtable.com">Airtable</a> back-end to create an ever-growing and persistent knowledge base. On loading, the app calls for 2 database tables as JSON, which are then processed and mapped into the state of the <code>&lt;List /&gt;</code> component. Every time a new item-to-section mapping is made by the user, the app makes a call to insert a new record into the table that manages those relationships. The next time any user adds that item, it will automatically be placed in its proper section.</p>
<h2 id="whatsnext">Whats Next</h2>
<p>The most obvious future feature for this app is the ability for users to save and load their personalized list, and adjust it according to their needs. Currently every time the app loads, it starts with an empty list, and while the database makes section mapping persistent, I want to utilize it further to make this app truly useful to efficiency-minded shoppers.</p>
<p>I originally developed this app as a replacement for iOS Reminders, which was a very functional grocery list solution until iOS 13, where re-ordering items became a frustrating chore. Apple has an open Reminders API, so my hope is that one day I can make a native iOS/watchOS app that takes full advantage of the power of iCloud. Don't even get me started on possible Augmented Reality use cases, that's a discussion for 2021 at the earliest.</p>]]></description><link>https://giammattei.co/blog/dijkstras-cart</link><guid isPermaLink="true">https://giammattei.co/blog/dijkstras-cart</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Sun, 15 Dec 2019 05:00:00 GMT</pubDate></item><item><title><![CDATA[Minesweeper]]></title><description><![CDATA[<h1 id="playminesweeperhttpsminecraftsweepernetlifyapp"><a href="https://mine-craft-sweeper.netlify.app/">Play Minesweeper</a></h1>
<p>Long ago, I made a version of Minesweeper in Java for a school project. It was ugly, but it had all the functionality that you would expect if you have played the Windows-bundled game at any point in the 1990s.</p>
<p>As a project for my developer portfolio, I wanted to revisit this concept, with some additional requirements:</p>
<p>-I wanted it to look good. No more simple paint commands, there needed to be a distinct visual style and a high amount of polish.</p>
<p>-I wanted it to be mobile friendly. Too many minesweeper clones mindlessly clone the left click/right click interface of the original, which makes it impossible to use on a touchscreen device.</p>
<p>-I wanted it to be HTML-based. My previous attempt at the game used a Java drawing canvas, and refreshed the entire screen after each click. To practice DOM manipulation, I wanted each cell to be an HTML element that would keep track of its state, react to input, and show the correct content.</p>
<p>This would be a huge challenge, but many design pieces fell into place when an idea hit me: could I mash up Minesweeper and Minecraft?</p>
<p>Minecraft is a game that uses a variety of square image elements. Its gameplay also centers on digging down and avoiding randomly generated danger. And the mechanic of holding a click or tap to break through a block over time solved my input problem. Plus, all the assets I would need (including sound effects) were easy to obtain directly from the game! (My thanks to Mojang and Microsoft for my unauthorized use of their intellectual property.)</p>
<p>I began by learning how to use JavaScript to create a grid of <code>&lt;div&gt;</code> elements, using for loops to assign each of them an ID that contained their x and y coordinates. A two dimensional array of objects called <code>state</code> held all the information I needed for each block: whether it had been revealed, if it was a bomb(creeper!), how many bombs were nearby, and so on.</p>
<p>Using regular expressions and the getElementById command, I was able to use several specialized functions to keep the visual state of each block and its logical state in sync, and some tricky timeout and event listener logic gave me the pointer interface I was looking for: tap once to "flag" a block, hold to reveal.</p>
<p>I used timeouts in other places to improve the tactile feel of the game. The collapsing that occurs when a "zero-nearby" square is discovered (a process that makes clever use of recursive functions) is time-delayed to proceed in steps. A game over screen coincides with the creeper's explosion, along with an interval-based transparency fade. I really enjoyed adding these touches to the game, since they added up to create a polished experience.</p>
<p>In future versions, I'd like to add a difficulty selector, make use of animation methods to keep the block breaking animation fluid, and find a way to frontload assets so they do not take time to load upon the first playthrough (this is most noticeable on mobile). If you have feedback on how to make this better, I would love to hear it!</p>]]></description><link>https://giammattei.co/blog/minesweeper</link><guid isPermaLink="true">https://giammattei.co/blog/minesweeper</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Sat, 28 Sep 2019 04:00:00 GMT</pubDate></item><item><title><![CDATA[KerfCase]]></title><description><![CDATA[<p>I've been an employee of <a href="https://kerfcase.com">KerfCase LLC</a> since October of 2016. Working at a combination specialty wood shop and ecommerce company is a great way to pick up a lot of different skills, and during my time there I have learned a lot about small-batch production, online marketing, and how a small business functions.</p>
<p>KerfCase's website is built on the <a href="https://www.shopify.com">Shopify</a> platform, which is a robust template-based ecommerce platform that allows for both WYSIWYG editing and direct code manipulation. Over the years, many developers and contractors have built on our theme, adding features and tweaking performance. Without having a developer on staff, we were locked into the basic look and functionality of the site, since a fundamental overhaul would be prohibitively expensive and labor intensive.</p>
<p><img src="/img/kerfcase-collection.png" alt="kerfcase collection page" /></p>
<p>As Kerf grew and began to diversify its product line, we reached a point where we wanted to change our branding to reflect our new identity. We hired a graphic designer to revise our logo and come up with a consistent visual and design language for our brand, including colors, typefaces, and layouts. The hope was that we would then hire a web developer on contract to apply these changes to our site.</p>
<p><img src="/img/kerfcase-product.png" alt="kerfcase collection page" /></p>
<p>As luck would have it, I had begun studying programming, and felt confident that it would be great for my professional development, and much less expensive for the company, for me to take on the task of totally visually overhauling our site. Work began in May 2019 and the revamped design went live in July of 2019. Along the way I learned a lot about project planning, the software deployment process, and the quirks and tricks of managing a large production site.</p>
<h1 id="keyfeatures">Key features:</h1>
<h3 id="mobilefirst">Mobile first</h3>
<p>Mobile traffic forms the majority of our page views, so I began my design and style work focusing exclusively on mobile, coming around to desktop layouts late in the process. This helped me create consistent visuals and utility across the site, and made responsive design simple to implement.</p>
<h3 id="grids">Grids</h3>
<p>Our graphic and user interface designers came up with a variety of grids and grid-based layouts to create a consistent and aesthetically pleasing interface. I had a lot of fun using photoshop and CSS to reproduce their mockups down to the pixel.</p>
<h3 id="menusandoverlays">Menus and overlays</h3>
<p>Creating dynamic menus and information-rich hover overlays gave our site a new dimension, and our users a quick way to get their bearings. I learned a lot about JavaScript and the DOM when implementing these features, but used pure CSS when possible.</p>
<p><img src="/img/kerfcase-devices.png" alt="kerfcase devices" /></p>]]></description><link>https://giammattei.co/blog/kerfcase</link><guid isPermaLink="true">https://giammattei.co/blog/kerfcase</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Sun, 01 Sep 2019 04:00:00 GMT</pubDate></item><item><title><![CDATA[giammattei.co]]></title><description><![CDATA[<p>It was evident from the start that if I wanted to be a web developer, the best way to do that would be to make a website.</p>
<p>Though there are lots and lots of tools and platforms for creating websites available now, none offer the total control that you get from putting your hands directly on the HTML and CSS of something you spun from whole cloth.</p>
<p>Not to mention the cost savings: Squarespace costs roughly as much as a Netflix subscription, whereas there are services that offer hosting for static sites absolutely free, and a domain name can be rented for pennies a month.</p>
<p>It turns out that making a good-looking, responsive, content-rich website in 2019 is a lot of work! Who'd have thunk it? But the process of starting with a blank text document and building up a portfolio piece-by-piece has been a deeply rewarding experience.</p>
<p>giammattei.co is a mobile site with media queries for desktop users. I got the advice that mobile-first was a great way to tackle responsive design, and it did make it very easy to create a good-looking layout, then tweak individual elements for a beautiful desktop presentation.</p>
<p>So far JavaScript use is limited to the mobile "hamburger menu" and some form logic (if you ignore the game made entirely in JavaScript), but I want to do more with it as I improve the site. I'm a big fan of the way Apple uses JavaScript to fade-in or move screen elements as you scroll, and I want to learn more about that as I go.</p>
<p>I've focused on learning fundamentals, so no dependencies or frameworks are currently in use. If I decide to do a deep dive into Bootstrap or something similar, it might be a fun project to refactor the site. Maybe one day!</p>
<p>My minimum viable product for this page is that the copy is up and all the links work. I plan on tweaking it going forward to ensure that it's as content-rich as possible, and will be adding new blog posts regularly.</p>]]></description><link>https://giammattei.co/blog/giammattei</link><guid isPermaLink="true">https://giammattei.co/blog/giammattei</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Wed, 07 Aug 2019 04:00:00 GMT</pubDate></item><item><title><![CDATA[Hello, World!]]></title><description><![CDATA[<p>I've written the "Your First Program" program a few times now, and in a few different languages. Whether you *include your stdio, or get right to the System.out.print()ing, it usually doesn't take long for a working program in a given language to be checked off your list. The hard part comes later, and can be very overwhelming.</p>
<p>I resisted majoring in Computer Science in college (and had more than one occasion to turn it down), and part of me has always wondered where I'd be if I had stuck with it. I've had a long and varied career, interacting with very smart and resourceful coworkers and using my technical knowhow and soft skills to teach tough concepts to unfamiliar minds. I have no regrets.</p>
<p>I have had, though, new responsibilities that exposed me to the world of code. A teammate left my company, and maintaining our large and ungainly website became my problem. At first, I knew just enough HTML and if/else logic to keep the shoestring and duct tape operation functioning normally, but I began wishing I had the tools and knowhow to improve the backend and make it run more smoothly and predictably.</p>
<p>In my spare time I started to teach myself computer science, coding, and software development, through a combination of books, online videos, and self-directed projects. What I have been thrilled to discover, after just 6 weeks of study, is that I really enjoy programming, and that many of the skills required for good code - delegation of tasks, focus in a distraction-prone environment, and attacking a problem from multiple angles (to name a few) - are skills that I've been actively honing for 10 years.</p>
<p>In years past I've sometimes fantasized about going back to school and getting a CS degree. A simple truth has been revealed to me recently that has energized my thinking: I don't have to do that. The cornucopia of resources available, for free, to anyone with determination and discipline are enough to fully master a valuable skill and open up one's horizons, without the 6 figures of debt.</p>
<p>I started this site to chronicle my journey into code, show off my projects, and maybe one day help others to take the leap and learn what you can do if you open up your terminal and start typing.</p>
<p>Hello, world!</p>]]></description><link>https://giammattei.co/blog/hello-world</link><guid isPermaLink="true">https://giammattei.co/blog/hello-world</guid><dc:creator><![CDATA[Phil Giammattei]]></dc:creator><pubDate>Sun, 19 May 2019 04:00:00 GMT</pubDate></item></channel></rss>